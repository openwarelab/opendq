###############################################################################

# Toolchain executables
CC = arm-none-eabi-gcc
AS = arm-none-eabi-as
AR = arm-none-eabi-ar
LD = arm-none-eabi-ld
GDB = arm-none-eabi-gdb
OBJCOPY = arm-none-eabi-objcopy
OBJSIZE = arm-none-eabi-size

###############################################################################

# C compiler flags
CFLAGS  = -mthumb -mcpu=cortex-m3 -mlittle-endian
CFLAGS += -ffunction-sections -fdata-sections -fshort-enums
CFLAGS += -fshort-enums -fomit-frame-pointer -fno-strict-aliasing
CFLAGS += -std=c99
CFLAGS += -Wall -pedantic -Wstrict-prototypes
CFLAGS += -O0
CFLAGS += -g3 -ggdb
CFLAGS += $(DOPTIONS)

# C linker flags
LDFLAGS += -mthumb -mcpu=cortex-m3 -mlittle-endian
LDFLAGS += -Wl,--gc-sections,--sort-section=alignment
LDFLAGS += -nostartfiles

# Binary flags
OBJCOPY_FLAGS += --gap-fill 0xFF
OBJDUMP_FLAGS += --disassemble --source --disassembler-options=force-thumb

# Makefile flags
MAKEFLAGS = -j4

###############################################################################

DOXYGEN        = doxygen
DOXYGEN_NAME   = doxygen
DOXYGEN_PATH   = $(PROJECT_HOME)/$(DOXYGEN_NAME)
DOXYGEN_FILE   = doxyfile
DOXYGEN_HTML   = html
DOXYGEN_LATEX  = latex
DOXYGEN_OUTPUT = refman.pdf
DOXYGEN_FINAL  = doxygen.pdf

###############################################################################

# Define the board subdirectory
BOARD_NAME = board
BOARD_PATH = $(PROJECT_HOME)/$(BOARD_NAME)

# Define the scheduler subdirectory
SCHEDULER_NAME = scheduler
SCHEDULER_PATH = $(PROJECT_HOME)/$(SCHEDULER_NAME)

# Define the library subdirectory
LIBRARY_NAME = library
LIBRARY_PATH = $(PROJECT_HOME)/$(LIBRARY_NAME)

# Define the platform subdirectory
PLATFORM_NAME = platform
PLATFORM_PATH = $(PROJECT_HOME)/$(PLATFORM_NAME)

# Define the protocols subdirectory
PROTOCOLS_NAME = protocols
PROTOCOLS_PATH = $(PROJECT_HOME)/$(PROTOCOLS_NAME)

###############################################################################

# Include the names of the source files to compile
SRC_FILES += $(PROJECT_FILES)

# Define the name and path where the temporary object files are stored
BIN_PATH = bin

# Coverts the source files (c and cpp) to object files (o) to be used as targets
TMP_FILES += $(patsubst %.c, %.o, ${SRC_FILES})

# Filters out the source files (c and cpp) from the object files (o) to be compiled
BIN_FILES = $(filter-out %.c %.h, $(TMP_FILES))

# Adds the path to where the object files need to be stored
BIN_TARGET = $(addprefix $(BIN_PATH)/, $(BIN_FILES))

###############################################################################

# Include the board makefiles
ifeq ($(USE_BOARD), TRUE)
    INC_PATH += -I $(BOARD_PATH)
    VPATH += $(BOARD_PATH)
endif

# Decide if we need to include the scheduler makefile
ifeq ($(USE_SCHEDULER), TRUE)
    include $(SCHEDULER_PATH)/Makefile.include
    INC_PATH += -I $(SCHEDULER_PATH)
    VPATH += $(SCHEDULER_PATH)
endif

# Decide if we need to include the library makefile
ifeq ($(USE_LIBRARY), TRUE)
    include $(LIBRARY_PATH)/Makefile.include
    INC_PATH += -I $(LIBRARY_PATH)
    VPATH += $(LIBRARY_PATH)
endif

# Include the platform and library makefiles
ifeq ($(USE_PLATFORM), TRUE)
    include $(PLATFORM_PATH)/Makefile.include
endif

# Decide if we need to include the protocols makefile
ifeq ($(USE_PROTOCOLS), TRUE)
    include $(PROTOCOLS_PATH)/Makefile.include
    INC_PATH += -I $(PROTOCOLS_PATH)
    VPATH += $(PROTOCOLS_PATH)
endif

###############################################################################

.DEFAULT_GOAL = all

.PHONY: all
all: pre build post stats

pre:
	@echo "Building '$(PROJECT_NAME)' project..."
	@mkdir -p $(BIN_PATH)

build: $(BIN_TARGET)

post: $(PROJECT_NAME).hex $(PROJECT_NAME).bin
	@echo "Building '$(PROJECT_NAME)' done."
    
stats: $(PROJECT_NAME).elf
	@-$(OBJSIZE) $(PROJECT_NAME).elf

doc:
	@echo "Building documentation..."
	@cd $(DOXYGEN_PATH) && $(DOXYGEN)
	@cd $(DOXYGEN_PATH)/$(DOXYGEN_LATEX)/ && $(MAKE)
	@mv $(DOXYGEN_PATH)/$(DOXYGEN_LATEX)/$(DOXYGEN_OUTPUT) $(DOXYGEN_PATH)/$(DOXYGEN_FINAL)
    
$(PROJECT_NAME).bin: $(PROJECT_NAME).elf
	@-$(OBJCOPY) -O ihex $< $@

$(PROJECT_NAME).hex: $(PROJECT_NAME).elf
	@-$(OBJCOPY) -O binary $(OBJCOPY_FLAGS) $< $@

$(PROJECT_NAME).elf: $(BIN_TARGET)
	@echo "Linking '$(PROJECT_NAME)'..."
	@-$(CC) $(LDFLAGS) -T$(LINKER_SCRIPT) $^ -L$(PLATFORM_SRC) -l$(TARGET) -o $@

.PHONY: clean
clean:
	@echo "Cleaning '$(PROJECT_NAME)' project..."
	@rm -rf $(BIN_PATH)
	@rm -rf $(PROJECT_NAME)
	@rm -rf $(DOXYGEN_PATH)/$(DOXYGEN_HTML) $(DOXYGEN_PATH)/$(DOXYGEN_LATEX)
	@rm -rf *.bin *.elf *.hex .map

###############################################################################

# Target to compile C files into object files
$(BIN_PATH)/%.o: %.c
	@echo "Compiling $<..."
	@-$(CC) $(CFLAGS) $(INC_PATH) -c $< -o $@

